#!/usr/bin/python
# -*- coding: UTF-8 -*-

import tushare as ts
import pandas as pd
import numpy as np
import os

import MScore
import Mylog
import ZScore
import Mylog
import pymysql
from sqlalchemy import create_engine


def get_stocklist(pro):
    df_StockList = pro.stock_basic(exchange='', list_status='L', fields='ts_code,symbol,name,area,industry,list_date')
    return df_StockList

def main():
    db_engine = create_engine('mysql+pymysql://dbadmin:smartdatagogo@rm-bp1f9o31xc7536tz8125010.mysql.rds.aliyuncs.com:3306/smartdata')

    ts.set_token('abc23dc1908af03d82e14f830e52e28300ef5ac69bb5fe14e2ba8630')
    pro = ts.pro_api()
    df_StockList = get_stocklist(pro)

    MScoreStatfile = '/home/cheqi/code2/Scores/MScoreStat.xlsx'
    ZScoreStatfile = '/home/cheqi/code2/Scores/ZScoreStat.xlsx'

    if not os.path.exists(MScoreStatfile):
        #df_Mstat = pd.DataFrame(index = list(range(1990,2020)), columns=['end_date','range1', 'range2','range3','range4'])
        df_Mstat = pd.DataFrame({'year':list(range(1991,2021)).reverse(), 'range1':np.zeros(30), 'range2':np.zeros(30),
                                 'range3':np.zeros(30), 'range4':np.zeros(30), 'list':'a'})
    else:
        df_Mstat = pd.read_excel(ZScoreStatfile, index_col=0)
        os.remove(MScoreStatfile)

    if not os.path.exists(ZScoreStatfile):
        df_Zstat = pd.DataFrame({'year':list(range(1991,2021)), 'range1':np.zeros(30), 'range2':np.zeros(30),
                                 'range3':np.zeros(30), 'list':'a'})
    else:
        df_Zstat = pd.read_excel(ZScoreStatfile, index_col=0)
        os.remove(ZScoreStatfile)

    for index in range(len(df_StockList)-1):
        Mylog.MyLogger.info('Start calculate:%s, Index:%d' % (df_StockList.iloc[index].at['ts_code'], index))
        MScorefile = '/home/cheqi/code2/Scores/' + df_StockList.iloc[index].at['ts_code'] + '_' + df_StockList.iloc[index].at['name'].replace('*','x') + '_MScore.xlsx'
        ZScorefile = '/home/cheqi/code2/Scores/' + df_StockList.iloc[index].at['ts_code'] + '_' + df_StockList.iloc[index].at['name'].replace('*','x') + '_ZScore.xlsx'
        if not os.path.exists(MScorefile):
            df_MScore = MScore.cal_MScore(pro, df_StockList.iloc[index].at['ts_code'])
            MScore.check_MScore(df_MScore, df_Mstat)
            df_MScore.to_excel(MScorefile)
            try:
                df_MScore.to_sql(df_StockList.iloc[index].at['ts_code'] + 'MScore', con=db_engine, if_exists='replace')
            except pymysql.err.InternalError as e:
                print('Err:', e.message)
                print('df_MScore:', df_MScore)
                os.exit()

        if not os.path.exists(ZScorefile):
            df_ZScore = ZScore.cal_ZScore(pro, df_StockList.iloc[index].at['ts_code'])
            ZScore.check_ZScore(df_ZScore, df_Zstat)
            df_ZScore.to_excel(ZScorefile)
            try:
                df_ZScore.to_sql(df_StockList.iloc[index].at['ts_code'] + 'ZScore', con=db_engine, if_exists='replace')
            except pymysql.err.InternalError as e:
                print('Err:', e)
                print('df_ZScore:', df_ZScore)
                os.exit()

    df_Mstat.to_excel(MScoreStatfile)
    df_Mstat.to_sql('MScoreStat', con=db_engine, if_exists='replace')
    df_Zstat.to_excel(ZScoreStatfile)
    df_Zstat.to_sql('ZScoreStat', con=db_engine, if_exists='replace')


if __name__ == "__main__":
    main()