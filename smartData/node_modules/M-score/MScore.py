#!/usr/bin/python
# -*- coding: UTF-8 -*-

import tushare as ts
import pandas as pd
import numpy as np
import os
import Mylog
import Math

#https://xueqiu.com/3494667648/120049283

#range1: <-2.2, range2:-2.2 ~ -1, range3: -1~0, range4: >0
def check_MScore(df_Mscore, df_Mstat):

    for index, row in df_Mscore.iterrows():
        if row['MScore'] <= -2.2:
            df_Mstat.loc[df_Mstat['year'] == int(row['end_date'][0:4]), 'range1'] += 1

            Mylog.MyLogger.warning('%s_%s MScore is < -2.2, Low financial control' % (row['ts_code'], row['end_date']))
        elif -2.2 < row['MScore'] <= -1:
            df_Mstat.loc[df_Mstat['year'] == int(row['end_date'][0:4]), 'range2'] += 1
            Mylog.MyLogger.warning('%s_%s MScore is in [-2.2,-1]. Highly financial control' % (row['ts_code'], row['end_date']))
        elif -1 < row['MScore'] <= 0:
            df_Mstat.loc[df_Mstat['year'] == int(row['end_date'][0:4]), 'range3'] += 1
            Mylog.MyLogger.warning('%s_%s MScore is [-1,0]. Highly financial control' % (row['ts_code'], row['end_date']))
        elif row['MScore'] > 0:
            df_Mstat.loc[df_Mstat['year'] == int(row['end_date'][0:4]), 'range4'] += 1
            Mylog.MyLogger.warning('%s_%s MScore is >0. Highly financial control' % (row['ts_code'], row['end_date']))

    return

def cal_MScore(pro, ts_code):
    df_IS = pro.income(ts_code=ts_code, start_date='19900101', end_date='20200603',
                    fields='ts_code,f_ann_date,end_date,total_revenue,revenue,'
                           'total_cogs,oper_cost,sell_exp,admin_exp')

    df_BS = pro.balancesheet(ts_code=ts_code, start_date='19900101', end_date='20200603',
                          fields='ts_code,f_ann_date,end_date,notes_receiv,accounts_receiv,'
                                 'total_cur_assets,fix_assets,fa_avail_for_sale,total_assets,total_liab,money_cap,total_cur_liab,non_cur_liab_due_1y,taxes_payable')

    df_CF = pro.cashflow(ts_code=ts_code, start_date='19900101', end_date='20200603',
                         fields='ts_code,f_ann_date,end_date,depr_fa_coga_dpba,amort_intang_assets')

    #Get annual report
    df_IS = df_IS[df_IS['end_date'].str.contains('1231')]
    df_IS.index = range(len(df_IS))
    df_IS.drop_duplicates(subset=['end_date'],keep='first',inplace=True)
    df_IS.fillna(value=0, inplace=True)
    df_IS.reset_index(drop=True, inplace=True)

    df_BS = df_BS[df_BS['end_date'].str.contains('1231')]
    df_BS.index = range(len(df_BS))
    df_BS.drop_duplicates(subset=['end_date'],keep='first',inplace=True)
    df_BS.fillna(value=0, inplace=True)
    df_BS.reset_index(drop=True, inplace=True)

    df_CF = df_CF[df_CF['end_date'].str.contains('1231')]
    df_CF.index = range(len(df_CF))
    df_CF.drop_duplicates(subset=['end_date'],keep='first',inplace=True)
    df_CF.fillna(value=0, inplace=True)
    df_CF.reset_index(drop=True, inplace=True)

    DSRI = []   #DSRI= (Net Receivablest / Salest) / (Net Receivablest-1 / Salest-1)
    GMI = []    #GMI = [(Salest-1 - COGSt-1) / Salest-1] / [(Salest - COGSt) / Salest]
    AQI = []    #AQI = [1 - (Current Assetst + PP&Et + Securitiest) / Total Assetst] / [1 - ((Current Assetst-1 + PP&Et-1 + Securitiest-1) / Total Assetst-1)]
    SGI = []    #SGI = Salest / Salest-1
    DEPI = []   #DEPI = (Depreciationt-1/ (PP&Et-1 + Depreciationt-1)) / (Depreciationt / (PP&Et + Depreciationt))
    SGAI = []   #SGAI = (SG&A Expenset / Salest) / (SG&A Expenset-1 / Salest-1)
    TATA = []   #TATA=（Net Income from Continuing Operations - cash from operations）/total asset
                #TATA = 应计项 / 总资产 = ((∆流动资产-∆货币资金) - (∆流动负债-∆一年内到期长期负债-∆应交税费) - 折旧费用) / 总资产
    LEVI = []   #LEVI= leveraget / leveraget-1, leverage ratio=D/A

    for index in range(min(len(df_BS),len(df_IS),len(df_CF))-1):
        Mylog.MyLogger.info('Len of index:%d, Currently index:%d' % (min(len(df_BS),len(df_IS),len(df_CF)), index))
        numerator = Math.div((df_BS.iloc[index].at['notes_receiv'] + df_BS.iloc[index].at['accounts_receiv']), df_IS.iloc[index].at['revenue'])
        denominator = Math.div((df_BS.iloc[index+1].at['notes_receiv'] + df_BS.iloc[index+1].at['accounts_receiv']), df_IS.iloc[index+1].at['revenue'])
        DSRI.append(Math.div(numerator, denominator))

        numerator = Math.div((df_IS.iloc[index+1].at['revenue'] - df_IS.iloc[index+1].at['total_cogs']), df_IS.iloc[index+1].at['revenue'])
        denominator = Math.div((df_IS.iloc[index].at['revenue'] - df_IS.iloc[index].at['total_cogs']), df_IS.iloc[index].at['revenue'])
        GMI.append(Math.div(numerator, denominator))

        numerator = 1 - Math.div((df_BS.iloc[index].at['total_cur_assets'] + df_BS.iloc[index].at['fix_assets'] + df_BS.iloc[index].at['fa_avail_for_sale']), df_BS.iloc[index].at['total_assets'])
        denominator = 1 - Math.div((df_BS.iloc[index+1].at['total_cur_assets'] + df_BS.iloc[index+1].at['fix_assets'] + df_BS.iloc[index+1].at['fa_avail_for_sale']), df_BS.iloc[index+1].at['total_assets'])
        AQI.append(Math.div(numerator, denominator))

        numerator = df_IS.iloc[index].at['revenue']
        denominator = df_IS.iloc[index+1].at['revenue']
        SGI.append(Math.div(numerator, denominator))

        numerator = Math.div(df_CF.iloc[index+1].at['depr_fa_coga_dpba'], ( df_BS.iloc[index+1].at['fix_assets'] + df_CF.iloc[index+1].at['depr_fa_coga_dpba']))
        denominator = Math.div(df_CF.iloc[index].at['depr_fa_coga_dpba'], ( df_BS.iloc[index].at['fix_assets'] + df_CF.iloc[index].at['depr_fa_coga_dpba']))
        DEPI.append(Math.div(numerator, denominator))

        numerator = Math.div((df_IS.iloc[index].at['sell_exp'] + df_IS.iloc[index].at['admin_exp']), df_IS.iloc[index].at['revenue'])
        denominator = Math.div((df_IS.iloc[index+1].at['sell_exp'] + df_IS.iloc[index+1].at['admin_exp']), df_IS.iloc[index+1].at['revenue'])
        SGAI.append(Math.div(numerator, denominator))

        numerator = ((df_BS.iloc[index].at['total_cur_assets'] - df_BS.iloc[index+1].at['total_cur_assets']) - (df_BS.iloc[index].at['money_cap'] - df_BS.iloc[index+1].at['money_cap'])) -\
                    ((df_BS.iloc[index].at['total_cur_liab'] - df_BS.iloc[index+1].at['total_cur_liab']) - (df_BS.iloc[index].at['non_cur_liab_due_1y'] - df_BS.iloc[index+1].at['non_cur_liab_due_1y']) -\
                     (df_BS.iloc[index].at['taxes_payable'] - df_BS.iloc[index+1].at['taxes_payable'])) - df_CF.iloc[index].at['depr_fa_coga_dpba']
        denominator = df_BS.iloc[index].at['total_assets']
        TATA.append(Math.div(numerator, denominator))

        numerator = Math.div(df_BS.iloc[index].at['total_liab'], df_BS.iloc[index].at['total_assets'])
        denominator = Math.div(df_BS.iloc[index+1].at['total_liab'], df_BS.iloc[index+1].at['total_assets'])
        LEVI.append(Math.div(numerator, denominator))

    df_MScore = pd.DataFrame(index=range(len(DSRI)), columns=['ts_code', 'end_date', 'DSRI', 'GMI', 'AQI', 'SGI', 'DEPI', 'SGAI', 'TATA', 'LEVI', 'MScore', 'ScoreDiff'])
    df_MScore['ts_code'] = df_BS['ts_code']
    df_MScore['end_date'] = df_BS['end_date']
    df_MScore['DSRI'] = DSRI
    df_MScore['GMI'] = GMI
    df_MScore['AQI'] = AQI
    df_MScore['SGI'] = SGI
    df_MScore['DEPI'] = DEPI
    df_MScore['SGAI'] = SGAI
    df_MScore['TATA'] = TATA
    df_MScore['LEVI'] = LEVI
    df_MScore.fillna(value=0, inplace=True)

    #Beneish M-Score = -4.84 + 0.92*DSRI + 0.528*GMI + 0.404*AQI + 0.892*SGI + 0.115*DEPI – 0.172*SGAI + 4.679*TATA – 0.327*LEVI
    df_MScore['MScore'] = df_MScore.apply(lambda x:-4.84+0.92*x['DSRI']+0.528*x['GMI']+0.404*x['AQI']+0.892*x['SGI']+\
                                                   0.115*x['DEPI']-0.172*x['SGAI']+4.679*x['TATA']-0.327*x['LEVI'], axis=1)

    df_MScore['ScoreDiff'] = df_MScore['MScore'].diff(periods=-1)

    return(df_MScore)

if __name__ == "__main__":
    cal_MScore()